---
- name: Apache Container Deployment SMM
  hosts: apache
  vars_files:
    - vars/compose_vars.yml
    - vars/deployment_vars.yml
    - "{{ deployment_log }}"
  gather_facts: false
#  become: true

  tasks:

    - name: Wait for ssh
      ansible.builtin.wait_for:
        port: 22
        host: '{{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}'
        search_regex: OpenSSH
        delay: 10
      connection: local

    - name: Update apt cache
      become: true
      ansible.builtin.apt:
        update_cache: yes

    - name: Docker is present
      become: true
      ansible.builtin.package:
        name: docker
        state: present

    - name: Docker.io is present
      become: true
      ansible.builtin.package:
        name: docker.io
        state: present

    - name: Docker-compose is present
      become: true
      ansible.builtin.package:
        name: docker-compose
        state: present

    - name: Python-Docker is present
      become: true
      ansible.builtin.package:
        name: python3-docker
        state: present

    - name: Group docker exists
      become: true
      ansible.builtin.group:
        name: docker
        state: present

#    - name: Install AWS ECR Credential Helper
#      become: true
#      ansible.builtin.apt:
#        name: amazon-ecr-credential-helper
#        state: present

    - name: create web directory
      become: true
      file:
        path: "{{ www_dir }}"
        owner: www-data
        state: directory
        mode: 0777

    - name: Create home/.docker directory
      become: false
      file:
        path: "$HOME/.docker"
        state: directory
        mode: 0700

#    - name: Copy initial ECR credential
#      ansible.builtin.copy:
#        src: "{{ src_dir }}/config.json"
#        dest: "$HOME/.docker/config.json"

#    - name: Pull image from ECR
#      shell: |
#        docker pull "{{ my_prebuild }}"
#      register: result
#    - debug:
#        msg: "{{ result }}"

    - name: Create www directory
      become: true
      file:
        path: "{{ apache_dir }}"
        state: directory
        mode: 0777

#    - name: Create mysql directory
#      become: true
#      file:
#        path: "{{ mysql_dir }}"
#        state: directory
#        mode: 0777


    - name: Copy initial compose
      become: true
      ansible.builtin.copy:
        src: "{{ src_dir }}/init-docker-compose.yml"
        dest: "{{ apache_dir }}/docker-compose.yml"


    - name: Copy docker build
      become: true
      ansible.builtin.copy:
        src: "{{ src_dir }}/init-Dockerfile"
        dest: "{{ apache_dir }}/Dockerfile"

    - name: Copy index.php
      become: true
      ansible.builtin.copy:
        src: "{{ src_dir }}/www/html/index.php"
        dest: "{{ www_dir }}/index.php"
        mode: 0644

    - name: Update mysql connection info
      become: true
      shell: |
        sed -i 's/"$DB_USER"/{{ db_user }}/g' "{{ www_dir }}"/index.php 
        sed -i 's/"$DB_PASS"/{{ db_pass }}/g' "{{ www_dir }}"/index.php
        sed -i 's/"$DB_HOST"/{{ mysql_priv_ip }}/g' "{{ www_dir }}"/index.php
        sed -i 's/"$DB_NAME"/{{ db_name }}/g' "{{ www_dir }}"/index.php


    - name: Run docker compose
      become: false
      community.docker.docker_compose:
        project_src: "{{ apache_dir }}"
        files: 
          - docker-compose.yml
      register: output

    - name: Show initial results
      ansible.builtin.debug:
        var: output

    - name: Copy initial compose
      become: true
      ansible.builtin.copy:
        src: "{{ src_dir }}/docker-compose.yml"
        dest: "{{ apache_dir }}/docker-compose.yml"

    - name: Copy docker build
      become: true
      ansible.builtin.copy:
        src: "{{ src_dir }}/Dockerfile"
        dest: "{{ apache_dir }}/Dockerfile"

    - name: Run docker compose
      become: false
      community.docker.docker_compose:
        project_src: "{{ apache_dir }}"
        files:
          - docker-compose.yml
      register: output

    - name: Show update results
      ansible.builtin.debug:
        var: output

    - name: Verify that the web service is running
      become: true
      ansible.builtin.assert:
        that:
          - "output.services.web.apache2_php82.state.running"
      register: result
    - debug:
        msg: "{{ result }}"
